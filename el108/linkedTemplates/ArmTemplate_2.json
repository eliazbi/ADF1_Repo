{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "el108"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable22')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [],
				"typeProperties": {
					"schema": "PUBLIC",
					"table": "FactResellerSales"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable23')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [],
				"typeProperties": {
					"schema": "PUBLIC",
					"table": "CustomerDim"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable24')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [],
				"typeProperties": {
					"schema": "PUBLIC",
					"table": "ProductDim"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable25')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [],
				"typeProperties": {
					"schema": "PUBLIC",
					"table": "DateDim"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [],
				"typeProperties": {
					"schema": "PUBLIC",
					"table": "NW_SALES"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [
					{
						"name": "OrderID",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "CustomerID",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "EmployeeID",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "OrderDate",
						"type": "TIMESTAMP_NTZ",
						"precision": 29,
						"scale": 9
					},
					{
						"name": "OrderAmt",
						"type": "NUMBER",
						"precision": 10,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "PUBLIC",
					"table": "Orders_Tar"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [],
				"typeProperties": {
					"schema": "PUBLIC",
					"table": "CustomerSales"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [
					{
						"name": "SID",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "EMPID",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "EMPNAME",
						"type": "VARCHAR",
						"precision": 50,
						"scale": 0
					},
					{
						"name": "DEPT",
						"type": "VARCHAR",
						"precision": 50,
						"scale": 0
					},
					{
						"name": "ACTIVE",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "STARTDATE",
						"type": "DATE",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "ENDDATE",
						"type": "DATE",
						"precision": 10,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "PUBLIC",
					"table": "EMPTART2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable7')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [
					{
						"name": "SID",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "EMPID",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "EMPNAME",
						"type": "VARCHAR",
						"precision": 50,
						"scale": 0
					},
					{
						"name": "DEPT",
						"type": "VARCHAR",
						"precision": 50,
						"scale": 0
					},
					{
						"name": "ACTIVE",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "STARTDATE",
						"type": "DATE",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "ENDDATE",
						"type": "DATE",
						"precision": 10,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "PUBLIC",
					"table": "EMPTART2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable8')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [
					{
						"name": "SID",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "EMPID",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "EMPNAME",
						"type": "VARCHAR",
						"precision": 50,
						"scale": 0
					},
					{
						"name": "DEPT",
						"type": "VARCHAR",
						"precision": 50,
						"scale": 0
					},
					{
						"name": "ACTIVE",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "STARTDATE",
						"type": "DATE",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "ENDDATE",
						"type": "DATE",
						"precision": 10,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "PUBLIC",
					"table": "EMPTART2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable9')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [
					{
						"name": "SID",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "EMPID",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "EMPNAME",
						"type": "VARCHAR",
						"precision": 50,
						"scale": 0
					},
					{
						"name": "DEPT",
						"type": "VARCHAR",
						"precision": 50,
						"scale": 0
					},
					{
						"name": "ACTIVE",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "STARTDATE",
						"type": "DATE",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "ENDDATE",
						"type": "DATE",
						"precision": 10,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "PUBLIC",
					"table": "EMPTYPE2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_SAS_URI",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Saleorder.txt",
						"container": "cn1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "String"
					},
					{
						"name": "RevisionNumber",
						"type": "String"
					},
					{
						"name": "OrderDate",
						"type": "String"
					},
					{
						"name": "DueDate",
						"type": "String"
					},
					{
						"name": "ShipDate",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "OnlineOrderFlag",
						"type": "String"
					},
					{
						"name": "SalesOrderNumber",
						"type": "String"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "String"
					},
					{
						"name": "AccountNumber",
						"type": "String"
					},
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "SalesPersonID",
						"type": "String"
					},
					{
						"name": "TerritoryID",
						"type": "String"
					},
					{
						"name": "BillToAddressID",
						"type": "String"
					},
					{
						"name": "ShipToAddressID",
						"type": "String"
					},
					{
						"name": "ShipMethodID",
						"type": "String"
					},
					{
						"name": "CreditCardID",
						"type": "String"
					},
					{
						"name": "CreditCardApprovalCode",
						"type": "String"
					},
					{
						"name": "CurrencyRateID",
						"type": "String"
					},
					{
						"name": "SubTotal",
						"type": "String"
					},
					{
						"name": "TaxAmt",
						"type": "String"
					},
					{
						"name": "Freight",
						"type": "String"
					},
					{
						"name": "TotalDue",
						"type": "String"
					},
					{
						"name": "Comment",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "String"
					},
					{
						"name": "ModifiedDate",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_SAS_URI",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "cn2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline-TCDC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select TableName,WatermarkValue from watermarktable where TableName = '[dbo].[Orders_Src]'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable8",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Lookup2",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select max(OrderDate) as mdate from [dbo].[Orders_Src]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable9",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Lookup2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM [dbo].[Orders_Src] where OrderDate >'@{activity('Lookup1').output.firstRow.WatermarkValue}' AND\nOrderDate <= '@{activity('Lookup2').output.firstRow.mdate}'\n\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SnowflakeSink",
								"importSettings": {
									"type": "SnowflakeImportCopyCommand"
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_SAS_URI",
									"type": "LinkedServiceReference"
								},
								"path": "cn1"
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable10",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SnowflakeTable12",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spSetWatermark]",
							"storedProcedureParameters": {
								"TableName": {
									"value": {
										"value": "@activity('Lookup1').output.firstRow.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"NewTime": {
									"value": {
										"value": "@activity('Lookup2').output.firstRow.mdate",
										"type": "Expression"
									},
									"type": "Datetime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"folder": {
					"name": "Training"
				},
				"annotations": [],
				"lastPublishTime": "2021-02-06T17:25:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDTYPE2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Training"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable11",
								"type": "DatasetReference"
							},
							"name": "EMPSOURCE"
						},
						{
							"dataset": {
								"referenceName": "SnowflakeTable17",
								"type": "DatasetReference"
							},
							"name": "EMPTAR"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable18",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "SnowflakeTable19",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "HashSource"
						},
						{
							"name": "HashTar"
						},
						{
							"name": "Exists1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Exists2"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tEmpid as integer,\n\t\tEmpname as string,\n\t\tDept as string,\n\t\tSTARTDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> EMPSOURCE\nsource(output(\n\t\tSID as decimal(38,0),\n\t\tEMPID as decimal(38,0),\n\t\tEMPNAME as string,\n\t\tDEPT as string,\n\t\tACTIVE as decimal(38,0),\n\t\tSTARTDATE as date,\n\t\tENDDATE as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'table') ~> EMPTAR\nEMPSOURCE derive(SOURCEHASH = md5(Empname,Dept)) ~> HashSource\nEMPTAR derive(TragetHash = md5(EMPNAME,DEPT)) ~> HashTar\nHashSource, HashTar exists(SOURCEHASH == TragetHash,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists1\nExists1 derive(ACTIVE = 1,\n\t\tENDDATE = toDate('9999-12-31')) ~> DerivedColumn1\nHashTar, DerivedColumn1 exists(EMPTAR@EMPID == EMPSOURCE@Empid\n\t&& EMPTAR@EMPNAME == EMPSOURCE@Empname,\n\tnegate:false,\n\tbroadcast: 'auto')~> Exists2\nExists2 derive(ACTIVE = 0,\n\t\tENDDATE = toDate(currentUTC())) ~> DerivedColumn2\nDerivedColumn2 alterRow(updateIf(true())) ~> AlterRow1\nDerivedColumn1 sink(input(\n\t\tSID as decimal(38,0),\n\t\tEMPID as decimal(38,0),\n\t\tEMPNAME as string,\n\t\tDEPT as string,\n\t\tACTIVE as decimal(38,0),\n\t\tSTARTDATE as date,\n\t\tENDDATE as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tEMPID = Empid,\n\t\tEMPNAME = Empname,\n\t\tDEPT = Dept,\n\t\tACTIVE,\n\t\tSTARTDATE = STARTDate,\n\t\tENDDATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tstageInsert: true) ~> sink1\nAlterRow1 sink(input(\n\t\tSID as decimal(38,0),\n\t\tEMPID as decimal(38,0),\n\t\tEMPNAME as string,\n\t\tDEPT as string,\n\t\tACTIVE as decimal(38,0),\n\t\tSTARTDATE as date,\n\t\tENDDATE as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['SID'],\n\tformat: 'table',\n\tmapColumn(\n\t\tSID,\n\t\tEMPID,\n\t\tEMPNAME,\n\t\tDEPT,\n\t\tACTIVE,\n\t\tSTARTDATE,\n\t\tENDDATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tstageInsert: true) ~> sink2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Training"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable3",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tSalesOrderID as string,\n\t\tRevisionNumber as string,\n\t\tOrderDate as string,\n\t\tDueDate as string,\n\t\tShipDate as string,\n\t\tStatus as string,\n\t\tOnlineOrderFlag as string,\n\t\tSalesOrderNumber as string,\n\t\tPurchaseOrderNumber as string,\n\t\tAccountNumber as string,\n\t\tCustomerID as string,\n\t\tSalesPersonID as string,\n\t\tTerritoryID as string,\n\t\tBillToAddressID as string,\n\t\tShipToAddressID as string,\n\t\tShipMethodID as string,\n\t\tCreditCardID as string,\n\t\tCreditCardApprovalCode as string,\n\t\tCurrencyRateID as string,\n\t\tSubTotal as string,\n\t\tTaxAmt as string,\n\t\tFreight as string,\n\t\tTotalDue as string,\n\t\tComment as string,\n\t\trowguid as string,\n\t\tModifiedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tstageInsert: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Training"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable5",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Aggregate1"
						},
						{
							"name": "Window1"
						}
					],
					"script": "source(output(\n\t\tSalesOrderID as integer,\n\t\tRevisionNumber as integer,\n\t\tOrderDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tShipDate as timestamp,\n\t\tStatus as integer,\n\t\tOnlineOrderFlag as boolean,\n\t\tSalesOrderNumber as string,\n\t\tPurchaseOrderNumber as string,\n\t\tAccountNumber as string,\n\t\tCustomerID as integer,\n\t\tShipToAddressID as integer,\n\t\tBillToAddressID as integer,\n\t\tShipMethod as string,\n\t\tCreditCardApprovalCode as string,\n\t\tSubTotal as decimal(19,4),\n\t\tTaxAmt as decimal(19,4),\n\t\tFreight as decimal(19,4),\n\t\tTotalDue as decimal(19,4),\n\t\tComment as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nsource1 aggregate(groupBy(CustomerID),\n\tTotalSales = sum(SubTotal)) ~> Aggregate1\nAggregate1 window(asc(TotalSales, true),\n\tRunningTotalSales = sum(TotalSales)) ~> Window1\nWindow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tstageInsert: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable5')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Training"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable4",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable5",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable6",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Exists1"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Exists2"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tEmpid as short,\n\t\tEmpname as string,\n\t\tDept as string,\n\t\tSTARTDate as date 'MM/dd/yyyy'\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource(output(\n\t\tEmpid as integer,\n\t\tEmpname as string,\n\t\tDept as string,\n\t\tActive as integer,\n\t\tStartDate as date,\n\t\tEndDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source2\nsource1 derive(inputhash = md5(Empname,Dept)) ~> DerivedColumn1\nsource2 derive(sqlthash = md5(Empname,Dept)) ~> DerivedColumn2\nDerivedColumn1, DerivedColumn2 exists(inputhash == sqlthash,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists1\nExists1 derive(Active = 1,\n\t\tEndDate = toDate('9999-12-31')) ~> DerivedColumn3\nDerivedColumn2, DerivedColumn3 exists(source2@Empid == source1@Empid\n\t&& source2@Empname == source1@Empname,\n\tnegate:false,\n\tbroadcast: 'auto')~> Exists2\nExists2 derive(Active = 0,\n\t\tEndDate = toDate(currentUTC())) ~> DerivedColumn4\nDerivedColumn4 alterRow(updateIf(true())) ~> AlterRow1\nDerivedColumn3 sink(input(\n\t\tEmpid as integer,\n\t\tEmpname as string,\n\t\tDept as string,\n\t\tActive as integer,\n\t\tStartDate as date,\n\t\tEndDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tEmpid,\n\t\tEmpname,\n\t\tDept,\n\t\tActive,\n\t\tStartDate = STARTDate,\n\t\tEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1\nAlterRow1 sink(input(\n\t\tEmpid as integer,\n\t\tEmpname as string,\n\t\tDept as string,\n\t\tActive as integer,\n\t\tStartDate as date,\n\t\tEndDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['Empid','Empname','Dept'],\n\tformat: 'table',\n\tmapColumn(\n\t\tEmpid,\n\t\tEmpname,\n\t\tDept,\n\t\tActive,\n\t\tStartDate,\n\t\tEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow4')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Training"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable7",
								"type": "DatasetReference"
							},
							"name": "EmpT2"
						},
						{
							"dataset": {
								"referenceName": "SnowflakeTable9",
								"type": "DatasetReference"
							},
							"name": "TargetT2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable10",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "SnowflakeTable11",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Exists1"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Exists2"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tEmpid as integer,\n\t\tEmpname as string,\n\t\tDept as string,\n\t\tSTARTDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> EmpT2\nsource(output(\n\t\tSID as decimal(38,0),\n\t\tEMPID as decimal(38,0),\n\t\tEMPNAME as string,\n\t\tDEPT as string,\n\t\tACTIVE as decimal(38,0),\n\t\tSTARTDATE as date,\n\t\tENDDATE as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'table') ~> TargetT2\nEmpT2 derive(Source_Harsh = md5(Empname,Dept)) ~> DerivedColumn1\nTargetT2 derive(TarHash = md5(EMPNAME,DEPT)) ~> DerivedColumn2\nDerivedColumn1, DerivedColumn2 exists(Source_Harsh == TarHash,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists1\nExists1 derive(Active = 1,\n\t\tENDDATE = toDate('9999-12-31')) ~> DerivedColumn3\nDerivedColumn2, DerivedColumn3 exists(TargetT2@EMPID == EmpT2@Empid\n\t&& TargetT2@EMPNAME == EmpT2@Empname,\n\tnegate:false,\n\tbroadcast: 'auto')~> Exists2\nExists2 derive(Active = 0,\n\t\tENDDATE = toDate(currentUTC())) ~> DerivedColumn4\nDerivedColumn4 alterRow(updateIf(true())) ~> AlterRow1\nDerivedColumn3 sink(input(\n\t\tSID as decimal(38,0),\n\t\tEMPID as decimal(38,0),\n\t\tEMPNAME as string,\n\t\tDEPT as string,\n\t\tACTIVE as decimal(38,0),\n\t\tSTARTDATE as date,\n\t\tENDDATE as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tEMPID = Empid,\n\t\tEMPNAME = Empname,\n\t\tDEPT = Dept,\n\t\tACTIVE = Active,\n\t\tSTARTDATE = STARTDate,\n\t\tENDDATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tstageInsert: true) ~> sink1\nAlterRow1 sink(input(\n\t\tSID as decimal(38,0),\n\t\tEMPID as decimal(38,0),\n\t\tEMPNAME as string,\n\t\tDEPT as string,\n\t\tACTIVE as decimal(38,0),\n\t\tSTARTDATE as date,\n\t\tENDDATE as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['SID'],\n\tformat: 'table',\n\tmapColumn(\n\t\tSID,\n\t\tEMPID,\n\t\tEMPNAME,\n\t\tDEPT,\n\t\tACTIVE = DerivedColumn4@Active,\n\t\tSTARTDATE,\n\t\tENDDATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tstageInsert: true) ~> sink2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable9')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow5')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Training"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable12",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable20",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tCustomerID as integer,\n\t\tNameStyle as boolean,\n\t\tTitle as string,\n\t\tFirstName as string,\n\t\tMiddleName as string,\n\t\tLastName as string,\n\t\tSuffix as string,\n\t\tCompanyName as string,\n\t\tSalesPerson as string,\n\t\tEmailAddress as string,\n\t\tPhone as string,\n\t\tPasswordHash as string,\n\t\tPasswordSalt as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tstageInsert: true) ~> sink1"
				}
			},
			"dependsOn": []
		}
	]
}